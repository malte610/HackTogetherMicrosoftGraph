@page "/invoice"

@inject IDialogService DialogService
@inject IJSRuntime JSRuntime;
@inject GraphServiceClient GraphServiceClient

<PageTitle>Create Invoice</PageTitle>

<MudStack Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center" Class="pt-8">
    <MudContainer Style="width:50%" MaxWidth="MaxWidth.Medium">
        <MudStack Row=true>
            <MudSelect Value="@selectedCustomer" ValueChanged="(int value) => HandleCustomerChanged(value)" Label="Select Customer" Margin="Margin.Dense" Required AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Primary">
                @foreach (var customer in customers)
                {
                    <MudSelectItem Value="customers.IndexOf(customer)">
                        <MudText>@customer.DisplayName</MudText>
                        <MudText Typo="Typo.caption">@customer.CompanyName</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Class="flex-grow-0" Date="@selectedMonthYear" PickerMonthChanged="(DateTime? value) => HandleMonthYearChanged(value)" Label="Select Month" OpenTo="OpenTo.Month" FixDay="1" Required DateFormat="MMMM yy" Margin="Margin.Dense" AdornmentColor="Color.Primary" />
        </MudStack>
    </MudContainer>
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-4">
        <MudStack Row="true" Class="mb-4" Justify="Justify.SpaceEvenly">
            <div class="mud-theme-primary py-4 px-10 rounded-xl">
                <MudText Align="Align.Center"><strong>@invoice.TotalQuantity().ToString("0.00")</strong><br /><small>Hours</small></MudText>
            </div>
            <div class="mud-theme-primary py-4 px-10 rounded-xl">
                <MudText Align="Align.Center"><strong>@invoice.TotalNet().ToString("0.00")</strong><br /><small>Net</small></MudText>
            </div>        <div class="mud-theme-primary py-4 px-10 rounded-xl">
                <MudText Align="Align.Center"><strong>@invoice.TotalVAT().ToString("0.00")</strong><br /><small>VAT</small></MudText>
            </div>        <div class="mud-theme-primary py-4 px-10 rounded-xl">
                <MudText Align="Align.Center"><strong>@invoice.TotalGross().ToString("0.00")</strong><br /><small>Gross</small></MudText>
            </div>
        </MudStack>
        <MudStack Row="true" Class="mt-4" Justify="Justify.FlexEnd">
            <MudButton OnClick="SaveInvoice" Disabled="@savingInvoice" Class="" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Save">
                @if (savingInvoice)
                {
                    <MudProgressCircular Color="Color.Tertiary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudText>Save to PDF</MudText>
                }
            </MudButton>
        </MudStack>
    </MudContainer>
    @if (customerEvents.Count > 0)
    {
        <MudTable Items="@customerEvents" Hover="true" Class="mt-4">
            <HeaderContent>
                <MudTh>Start</MudTh>
                <MudTh>End</MudTh>
                <MudTh>Subject</MudTh>
                <MudTh>Duration</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Start">@DateTimeHelper.StrToReadableStr(@context.Start.DateTime)</MudTd>
                <MudTd DataLabel="End">@DateTimeHelper.StrToReadableStr(@context.End.DateTime)</MudTd>
                <MudTd DataLabel="Subject">@context.Subject</MudTd>
                <MudTd DataLabel="Duration">@(DateTime.Parse(@context.End.DateTime) - DateTime.Parse(@context.Start.DateTime))</MudTd>
                </RowTemplate>
            </MudTable>
    }
    else
    {
        <MudAlert Class="mt-8" Severity="Severity.Info">There are no billable events in your calendar for this customer/month 😲.<br>Try selecting another customer or month ⬆️</MudAlert>
    }
</MudStack>

@code {
    private UserContactsCollectionPage customers = new();
    private int selectedCustomer { get; set; }
    private DateTime? selectedMonthYear { get; set; } = DateTime.Now;

    private CalendarEventsCollectionPage allBillableEvents = new();
    private List<Event> customerEvents = new();

    private bool savingInvoice = false;
    private InvoiceHeader invoice = new();
    private DriveItem lastUpload = new();

    protected override async Task OnInitializedAsync()
    {
        customers = (UserContactsCollectionPage)await GraphServiceClient.Me.Contacts
            .Request().Filter("categories/any(i:i eq 'Customer')").GetAsync();

        if (customers.Count > 0)
        {
            selectedCustomer = 0;
        }
        await GetAllBillableEvents();

        StateHasChanged();
    }

    private async Task HandleCustomerChanged(int value)
    {
        selectedCustomer = value;
        await FilterEventsForCustomer();
    }

    private async Task HandleMonthYearChanged(DateTime? value)
    {
        selectedMonthYear = value;
        await GetAllBillableEvents();
    }

    private async Task GetAllBillableEvents()
    {
        var from = DateTimeHelper.GetStartOfMonth(selectedMonthYear!.Value).ToString("s");
        var to = DateTimeHelper.GetEndOfMonth(selectedMonthYear!.Value).ToString("s");
        var category = "Billable";

        allBillableEvents = (CalendarEventsCollectionPage)await GraphServiceClient.Me.Calendar.Events.Request()
            .Top(998)
            .Select("subject, categories, attendees, start, end")
            .Filter($"start/datetime ge '{from}' and start/datetime lt '{to}' and categories/any(p:p  eq '{category}')")
            .OrderBy("start/datetime")
            .GetAsync();

        await FilterEventsForCustomer();
    }

    private async Task FilterEventsForCustomer()
    {
        // filter attendees in LINQ, couldn't make it work in Graph Filter
        customerEvents = allBillableEvents.Where(
             e => e.Attendees.Any(
             a => a.EmailAddress.Address == customers.ElementAt(selectedCustomer).EmailAddresses.First().Address)
        ).ToList();
        await CreateInvoice();
    }

    private async Task CreateInvoice()
    {

        var settings = await GraphServiceClient.Me.Drive.Root.ItemWithPath("CalendarToInvoice/Data/Settings.xlsx").Workbook.Tables["Table1"].Rows.Request().GetAsync();

        invoice = new();

        invoice.InvoiceDate = DateTime.Now;

        invoice.SenderName = settings.First().Values.RootElement[0][0].GetString() ?? "";
        invoice.SenderPlanet = settings.First().Values.RootElement[0][1].GetString() ?? "";

        invoice.RecipientName = customers.ElementAt(selectedCustomer).DisplayName;
        invoice.RecipientPlanet = customers.ElementAt(selectedCustomer).BusinessAddress.CountryOrRegion;

        var hourlyRate = settings.First().Values.RootElement[0][2].GetDecimal();
        var vatRate = settings.First().Values.RootElement[0][3].GetDecimal();

        foreach (var ev in customerEvents)
        {
            invoice.InvoiceLines.Add(
                new InvoiceLine(invoice, ev, hourlyRate, vatRate)
            );
        }

    }
    #region Generate PDF, Upload and Change Categories on Event
    private async Task SaveInvoice()
    {
        savingInvoice = true;
        var invPDF = ReportService.CreateInvoice(invoice);

        await UploadInvoice(invPDF);
        await ChangeEventCategories();

        invoice.InvoiceLines.Clear();
        customerEvents.Clear();

        var options = new DialogOptions { Position = DialogPosition.Center };
        var dialog = await DialogService.ShowAsync<InvoicePostedDialog>("Your invoice was succesfully posted 🚀", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"let _discard_ = open(`{lastUpload.WebUrl}`, `_blank`)");
        }

        savingInvoice = false;
    }
    private async Task UploadInvoice(byte[] file)
    {
        var path = $"CalendarToInvoice/Invoices/{invoice.RecipientName}_{invoice.Guid.ToString()}.pdf";
        var uploadSession = await GraphServiceClient.Me.Drive.Root
            .ItemWithPath(path)
            .CreateUploadSession()
            .Request().PostAsync();

        using var stream = new System.IO.MemoryStream(file);

        // Max slice size must be a multiple of 320 KiB
        int maxSliceSize = 320 * 1024;
        var fileUploadTask = new LargeFileUploadTask<DriveItem>(uploadSession, stream, maxSliceSize, GraphServiceClient);

        try
        {
            // Upload the file
            var uploadResult = await fileUploadTask.UploadAsync();

            lastUpload = uploadResult.ItemResponse;
        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Error uploading: {ex.ToString()}");
        }
    }

    private async Task ChangeEventCategories()
    {
        var batchRequestContent = new BatchRequestContent();
        List<string> requestIds = new();
        List<Event> events = new();

        // Get Events in Batch Request
        foreach (var ev in invoice.InvoiceLines)
        {
            requestIds.Add(
                batchRequestContent.AddBatchRequestStep(
                    GraphServiceClient.Me.Calendar.Events[ev.EventId].Request()));
        }

        var eventsResponse = await GraphServiceClient.Batch.Request().PostAsync(batchRequestContent);

        try
        {
            foreach (var id in requestIds)
            {
                events.Add(
                    await eventsResponse.GetResponseByIdAsync<Event>(id)
                );
            }
        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Get events failed: {ex.Error.Message}");
        }

        // Patch Event Category in Batch Request
        var batchPatchRequestContent = new BatchRequestContent();
        foreach (var ev in events)
        {
            var categories = ev.Categories.ToList();
            categories.RemoveAll((cat) => cat == "Billable");
            categories.Add("Posted");
            ev.Categories = categories;

            var httpRequest = GraphServiceClient.Me.Calendar.Events[ev.Id].Request().GetHttpRequestMessage();
            httpRequest.Method = HttpMethod.Patch;
            httpRequest.Content = new StringContent(
                JsonSerializer.Serialize(ev), Encoding.UTF8, "application/json");

            batchPatchRequestContent.AddBatchRequestStep(httpRequest);
        }

        await GraphServiceClient.Batch.Request().PostAsync(batchPatchRequestContent);
    }
    #endregion
}

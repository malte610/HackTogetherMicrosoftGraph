@page "/invoice"

@inject GraphServiceClient GraphServiceClient

<PageTitle>Create Invoice</PageTitle>

<MudGrid Spacing="2" Justify="Justify.FlexStart">
    <MudItem xs="4">
        <MudStack Row=true>
            <MudSelect Value="@selectedCustomer" ValueChanged="(int value) => HandleCustomerChanged(value)" Label="Select Customer" Margin="Margin.Dense" Required AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Primary">
                @foreach (var customer in customers)
                {
                    <MudSelectItem Value="customers.IndexOf(customer)">
                        <MudText>@customer.DisplayName</MudText>
                        <MudText Typo="Typo.caption">@customer.CompanyName</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudDatePicker Class="flex-grow-0" Date="@selectedMonthYear" PickerMonthChanged="(DateTime? value) => HandleMonthYearChanged(value)" Label="Select Month" OpenTo="OpenTo.Month" FixDay="1" Required DateFormat="MMMM yy" Margin="Margin.Dense" AdornmentColor="Color.Primary" />
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    private UserContactsCollectionPage customers = new();
    private int selectedCustomer { get; set; }
    private DateTime? selectedMonthYear { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        customers = (UserContactsCollectionPage)await GraphServiceClient.Me.Contacts
            .Request().Filter("categories/any(i:i eq 'Customer')").GetAsync();

        if (customers.Count > 0)
        {
            selectedCustomer = 0;
        }
        StateHasChanged();
        //await UpdateTimeEntries();
    }

    private async Task HandleCustomerChanged(int value)
    {
        selectedCustomer = value;
        //await UpdateTimeEntries();
    }

    private async Task HandleMonthYearChanged(DateTime? value)
    {
        selectedMonthYear = value;
        //await UpdateTimeEntries();
    }
}

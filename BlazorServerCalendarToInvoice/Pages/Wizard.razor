@using System.Text.Json;

@inject GraphServiceClient GraphServiceClient;

<MudDialog Style="background-color:white">
    <DialogContent>
        <MudCarousel Class="mud-width-full" Style="height: 60vh;" TData="object" ShowArrows="true" ShowBullets="true" AutoCycle="false">
            <MudCarouselItem Transition="transition" Class="d-flex">
                <MudAlert Severity="Severity.Success" Class="mx-auto my-auto">
                    <MudStack Style="width: 100%;">
                        <MudText Typo="Typo.h3">Your first startup! 🥳</MudText><br />
                        <MudText Typo="Typo.body1">Let's set some files up for you in your OneDrive! ➡️</MudText>
                    </MudStack>
                </MudAlert>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Class="d-flex">
                <MudStack Class="mx-auto my-auto" Style="width: 80%;">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateFoldersAndFiles" Disabled="@(processingFolders || stepCompleted[0])">
                        @if (processingFolders)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Create Folders & Files</MudText>
                        }
                    </MudButton>
                    @if (stepCompleted[0])
                    {
                        <MudAlert Severity="Severity.Success"><MudText Typo="Typo.body1">Folders & Files created!</MudText></MudAlert>
                    }
                    <MudAlert Severity="Severity.Info">
                        <MudText Typo="Typo.body1">
                            We are creating some Folders and Files to store your invoices.<br /><br />
                            If you want to see this wizard again delete the 'CalendarToInvoice' folder in your OneDrive.<br /><br />
                            Or go to settings and use the button to ensure everything is deleted.
                        </MudText>
                    </MudAlert>
                </MudStack>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition" Class="d-flex">
                <MudStack Class="mx-auto my-auto" Style="width: 80%;">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateSampleData" Disabled="@(processingSampleData || stepCompleted[1])">
                        @if (processingSampleData)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Create Sample Data</MudText>
                        }
                    </MudButton>
                    @if (stepCompleted[1])
                    {
                        <MudAlert Severity="Severity.Success"><MudText Typo="Typo.body1">Sample Data created!</MudText></MudAlert>
                    }
                    <MudAlert Severity="Severity.Info">
                        <MudText Typo="Typo.body1">
                            In this step we are creating data in your outlook account.<br /><br />
                            Categories, Events, Contacts - all the good Stuff! <br /><br />
                            The random generated Events in your calendar are the main focus here. If they have the billable category and a contact with the customer category attached to them you can post the event to an invoice!
                        </MudText>
                    </MudAlert>
                </MudStack>
            </MudCarouselItem>
            <MudCarouselItem Transition="transition">
                <div class="d-flex" style="height:100%">
                    @if (stepCompleted.All(steps => steps == true))
                    {
                        <MudButton Color="Color.Primary" Class="mx-auto my-auto" OnClick="Submit">
                            <MudText Typo="Typo.h3">You did it! 🎉</MudText>
                            <MudText Typo="Typo.subtitle1">Click to close the Wizard and start creating invoices!</MudText>
                        </MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="mx-auto my-auto">You haven't completed all steps yet.<br />Please check the other steps again. 👈</MudText>
                    }
                </div>
            </MudCarouselItem>
        </MudCarousel>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private Transition transition = Transition.Slide;

    private bool[] stepCompleted = { false, false };

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private bool processingFolders = false;
    private bool processingSampleData = false;
    #region Request to create Folders and Files
    /// <summary>
    /// Creates Folders and Files in OneDrive
    /// </summary>
    /// <returns>Nothing.</returns>
    private async Task CreateFoldersAndFiles()
    {
        processingFolders = true;
        string appName = "CalendarToInvoice";
        DriveItem appDriveItem = new() { Name = appName, Folder = new() };
        DriveItem dataDriveItem = new() { Name = "Data", Folder = new() };
        DriveItem invoiceDriveItem = new() { Name = "Invoices", Folder = new() };

        var appFolder = await GraphServiceClient.Me.Drive.Root.Children.Request().AddAsync(appDriveItem);
        var dataFolder = await GraphServiceClient.Me.Drive.Items[appFolder.Id].Children.Request().AddAsync(dataDriveItem);
        var invoiceFolder = await GraphServiceClient.Me.Drive.Items[appFolder.Id].Children.Request().AddAsync(invoiceDriveItem);

        stepCompleted[0] = true;
        await CreateFiles(dataFolder);

        await Task.Delay(100);
        processingFolders = false;
    }

    /// <summary>
    /// Creates Files in a Folder.
    /// </summary>
    /// <param name="folder">The folder you want to have the files created in</param>
    /// <returns>Nothing.</returns>
    private async Task CreateFiles(DriveItem folder)
    {
        // DriveItem ledger = new() { Name = "Ledger.xlsx", File = new() };
        DriveItem settings = new() { Name = "Settings.xlsx", File = new() };

        // create files
        // await GraphServiceClient.Me.Drive.Items[folder.Id].Children.Request().AddAsync(ledger);
        var settingsDriveItem = await GraphServiceClient.Me.Drive.Items[folder.Id].Children.Request().AddAsync(settings);

        await CreateSettingsXLSX(settingsDriveItem);
    }

    private async Task CreateSettingsXLSX(DriveItem file)
    {

        var worksheets = await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Worksheets.Request().GetAsync();
        worksheets.First().Name = "Settings";
        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Worksheets[worksheets.First().Id].Request().UpdateAsync(worksheets.First());

        var table = await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables.Add(true, "Settings!A1:D1").Request().PostAsync();
        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Columns.Add(0, null, "My Name").Request().PostAsync();
        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Columns.Add(1, null, "My Home Planet").Request().PostAsync();
        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Columns.Add(2, null, "Hourly Rate").Request().PostAsync();
        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Columns.Add(3, null, "VAT").Request().PostAsync();

        //creates 8 cols by default ?
        //await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Columns["d"].Request().DeleteAsync();

        List<List<string>> rowValues = new() {
            new() {
                    "Arsha Lome", "Samovar", "200", "9", "", "", "", ""
            }
        };

        WorkbookTableRow newRow = new()
            {
                Values = JsonSerializer.SerializeToDocument(rowValues)
            };

        await GraphServiceClient.Me.Drive.Items[file.Id].Workbook.Tables[table.Id].Rows.Request().AddAsync(newRow);

    }
    #endregion

    #region Request to create Outlook Data
    private static OutlookCategory customerCategory = new OutlookCategory { DisplayName = "Customer", Color = CategoryColor.None };
    private static OutlookCategory billableCategory = new OutlookCategory { DisplayName = "Billable", Color = CategoryColor.Preset3 };
    private static OutlookCategory postedCategory = new OutlookCategory { DisplayName = "Posted", Color = CategoryColor.Preset4 };

    List<Contact> customers = new() {
                new Contact
            {
                GivenName = "Luke",
                Surname = "Skywalker",
                CompanyName = "Jedi Order",
                JobTitle = "Jedi Master",
                BusinessAddress = new PhysicalAddress() {CountryOrRegion = "Yavin 4"},
                EmailAddresses = new List<EmailAddress>() {
                    new EmailAddress() { Name = "Luke Skywalker", Address = "luke@newrepublic.jedi" }
                },
                Categories = new List<string> {customerCategory.DisplayName}
            },
                new Contact
            {
                GivenName = "Gideon",
                Surname = "Moff",
                CompanyName = "Galactic Empire",
                JobTitle = "Moff",
                BusinessAddress = new PhysicalAddress() {CountryOrRegion = "Coruscant"},
                EmailAddresses = new List<EmailAddress>() {
                    new EmailAddress(){ Name = "Moff Gideon", Address = "moffgideon@galacticempire.sith" },
                    new EmailAddress(){ Name = "ISB Moff Gideon", Address = "g@isb.sith" },
                },
                Categories = new List<string> {customerCategory.DisplayName}

            },
                new Contact
            {
                GivenName = "Din",
                Surname = "Djarin",
                CompanyName = "The Watch",
                JobTitle = "Bounty Hunter",
                BusinessAddress = new PhysicalAddress() {CountryOrRegion = "Mandalore"},
                EmailAddresses = new List<EmailAddress>() { new EmailAddress() { Name = "Mando", Address = "din@thewatch.man" } },
                Categories = new List<string> {customerCategory.DisplayName}
            },
                            new Contact
            {
                GivenName = "Han",
                Surname = "Solo",
                CompanyName = "New Republic",
                JobTitle = "General",
                BusinessAddress = new PhysicalAddress() {CountryOrRegion = "Chandrilla"},
                EmailAddresses = new List<EmailAddress>() { new EmailAddress() { Name = "Han Solo", Address = "han@solo.wild" } },
                Categories = new List<string> {"Buddy"}
            }
        };

    private string[] eventSubjects = { "Client Meeting", "Drafting Documents", "Preparing Client for Trial", "Mediation" };

    /// <summary>
    /// Creates Sample Data in Outlook.
    /// </summary>
    /// <returns>Nohting.</returns>
    private async Task CreateSampleData()
    {
        processingSampleData = true;

        await CreateOutlookCategories();
        await CreateOutlookContacts();
        await CreateOutlookEvents();

        stepCompleted[1] = true;
        processingSampleData = false;
    }

    /// <summary>
    /// Add Master Categories to Outlook if they don't already exist.
    /// </summary>
    /// <returns>Nothing.</returns>
    private async Task CreateOutlookCategories()
    {
        List<OutlookCategory> categories = new()
        {
            billableCategory,
            postedCategory
        };

        foreach (var category in categories)
        {
            try
            {
                await GraphServiceClient.Me.Outlook.MasterCategories.Request().AddAsync(category);
            }
            catch (ServiceException ex)
            {
                if (ex.Error.Code == "CategoryNameExists")
                {
                    Console.WriteLine("The category already exists! Nothing to do here.");
                }
                else
                {
                    throw;
                }
            }
        }
    }
    /// <summary>
    /// Adds Contacts to Outlook. Your Customers.
    /// </summary>
    /// <returns>Nohting.</returns>
    private async Task CreateOutlookContacts()
    {
        foreach (var customer in customers)
        {
            await GraphServiceClient.Me.Contacts.Request().AddAsync(customer);
        }
    }
    /// <summary>
    /// Adds generated events to the users calendar.
    /// </summary>
    /// <returns>Nothing</returns>
    private async Task CreateOutlookEvents()
    {
        foreach (var ev in GetEvents())
            await GraphServiceClient.Me.Calendar.Events.Request().AddAsync(ev);
    }
    /// <summary>
    /// Generates 50% non-billable research days an 50% billable events with customers.
    /// </summary>
    /// <returns>A list of events.</returns>
    private List<Event> GetEvents()
    {
        List<Event> events = new();

        // create list of possible event days of last month to today
        List<DateTime> dates = new();
        var today = DateTime.Today;
        DateTime start = new DateTime(today.Year, today.Month - 1, 1);

        for (DateTime dt = start; dt <= today; dt = dt.AddDays(1))
            dates.Add(dt);

        // 50% research days
        Random rnd = new();
        int halfOfDays = dates.Count / 2;

        var researchDays = dates.OrderBy(x => rnd.Next()).Take(halfOfDays).ToList();
        events.AddRange(CreateResearchEvents(researchDays));
        dates.RemoveAll(d => researchDays.Contains(d));

        // other half is billable
        foreach (var date in dates)
        {
            events.Add(
                CreateBillableEvent(
                    date,
                    customers.ElementAt(rnd.Next(0, customers.Count)),
                    eventSubjects[rnd.Next(0, eventSubjects.Length)]
                )
            );
        }

        return events;
    }
    /// <summary>
    /// Create static non-billable Research events
    /// </summary>
    /// <param name="dates"></param>
    /// <returns>A list of events.</returns>
    private List<Event> CreateResearchEvents(List<DateTime> dates)
    {
        List<Event> events = new();

        foreach (var date in dates)
        {
            events.Add(
                new Event
                    {
                        Subject = "Research",
                        Start = new DateTimeTimeZone
                        {
                            DateTime = new DateTime(date.Year, date.Month, date.Day, 8, 0, 0).ToString("s"),
                            TimeZone = "UTC"
                        },
                        End = new DateTimeTimeZone
                        {
                            DateTime = new DateTime(date.Year, date.Month, date.Day, 18, 0, 0).ToString("s"),
                            TimeZone = "UTC"
                        },

                    });
        }
        return events;
    }

    /// <summary>
    /// Create billable events for customer.
    /// </summary>
    /// <param name="date"></param>
    /// <param name="customer"></param>
    /// <param name="subject"></param>
    /// <returns></returns>
    private Event CreateBillableEvent(DateTime date, Contact customer, string subject)
    {
        return new Event
            {
                Subject = subject,
                Categories = new List<string> { billableCategory.DisplayName },
                Start = new DateTimeTimeZone
                {
                    DateTime = new DateTime(date.Year, date.Month, date.Day, 8, 0, 0).ToString("s"),
                    TimeZone = "UTC"
                },
                End = new DateTimeTimeZone
                {
                    DateTime = new DateTime(date.Year, date.Month, date.Day, 18, 0, 0).ToString("s"),
                    TimeZone = "UTC"
                },
                Attendees = new List<Attendee>()
                {
                    new Attendee
                    {
                        EmailAddress = customer.EmailAddresses.First(),
                        Type = AttendeeType.Required
                    }
                }
            };
    }
    #endregion
}

